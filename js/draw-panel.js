// –ü–∞–Ω–µ–ª—å —Ä–∏—Å–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞—Ä—Ç—ã
class DrawPanel {
    constructor(map) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ map —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º –∫–∞—Ä—Ç—ã Leaflet
        if (!map || typeof map.addLayer !== 'function') {
            console.error('Invalid map object provided to DrawPanel');
            return;
        }

        this.map = map;
        this.isDrawing = false;
        this.currentTool = null;
        this.currentColor = '#007bff';
        this.currentWidth = 3;
        
        // –°–æ–∑–¥–∞–µ–º FeatureGroup –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –∫–∞—Ä—Ç—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        this.drawnItems = L.featureGroup();
        this.map.addLayer(this.drawnItems);
        
        this.tempLayer = L.featureGroup();
        this.map.addLayer(this.tempLayer);
        
        this.startPoint = null;
        this.currentElement = null;
        this.isEraserActive = false;
        this.selectedIcon = null;
        
        this.initPanel();
        this.setupEventListeners();
        
        console.log('DrawPanel —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    initPanel() {
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏
        this.toggleBtn = L.control({position: 'topleft'});
        this.toggleBtn.onAdd = () => {
            this.toggleBtnContainer = L.DomUtil.create('button', 'draw-toggle-btn');
            this.toggleBtnContainer.innerHTML = '‚úèÔ∏è';
            this.toggleBtnContainer.title = '–ü–∞–Ω–µ–ª—å —Ä–∏—Å–æ–≤–∞–Ω–∏—è';
            return this.toggleBtnContainer;
        };
        this.toggleBtn.addTo(this.map);

        // –°–æ–∑–¥–∞–µ–º —Å–∞–º—É –ø–∞–Ω–µ–ª—å
        this.panel = L.control({position: 'topleft'});
        this.panel.onAdd = () => {
            this.panelContainer = L.DomUtil.create('div', 'draw-panel hidden');
            this.panelContainer.innerHTML = this.getPanelHTML();
            return this.panelContainer;
        };
        this.panel.addTo(this.map);
    }

    getPanelHTML() {
        return `
            <div class="draw-tools">
                <button class="draw-tool-btn" data-tool="line" title="–ü—Ä—è–º–∞—è –ª–∏–Ω–∏—è">üìè</button>
                <button class="draw-tool-btn" data-tool="freehand" title="–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è">‚úçÔ∏è</button>
                <button class="draw-tool-btn" data-tool="arrow" title="–°—Ç—Ä–µ–ª–∫–∞">‚û°Ô∏è</button>
                <button class="draw-tool-btn" data-tool="rectangle" title="–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫">‚¨ú</button>
                <button class="draw-tool-btn" data-tool="ellipse" title="–≠–ª–ª–∏–ø—Å">‚≠ï</button>
            </div>

            <div class="draw-controls">
                <div class="color-picker">
                    <span>–¶–≤–µ—Ç:</span>
                    <input type="color" id="draw-color" value="${this.currentColor}">
                </div>
                <div class="width-slider">
                    <span>–¢–æ–ª—â–∏–Ω–∞:</span>
                    <input type="range" id="draw-width" min="1" max="10" value="${this.currentWidth}">
                    <span id="width-value">${this.currentWidth}</span>
                </div>
            </div>

            <div class="icons-panel">
                <button class="icon-btn" data-icon="flag" title="–§–ª–∞–≥">üö©</button>
                <button class="icon-btn" data-icon="target" title="–¶–µ–ª—å">üéØ</button>
                <button class="icon-btn" data-icon="warning" title="–í–Ω–∏–º–∞–Ω–∏–µ">‚ö†Ô∏è</button>
                <button class="icon-btn" data-icon="star" title="–ó–≤–µ–∑–¥–∞">‚≠ê</button>
                <button class="icon-btn" data-icon="heart" title="–°–µ—Ä–¥—Ü–µ">‚ù§Ô∏è</button>
                <button class="icon-btn" data-icon="skull" title="–ß–µ—Ä–µ–ø">üíÄ</button>
            </div>

            <div class="actions-panel">
                <button class="action-btn delete" id="clear-all">–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë</button>
                <button class="action-btn" id="eraser-btn">–õ–∞—Å—Ç–∏–∫</button>
                <button class="action-btn" id="exit-drawing-mode">–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞</button>
                <button class="action-btn screenshot" id="screenshot-btn">–°–∫—Ä–∏–Ω—à–æ—Ç</button>
                <button class="action-btn screenshot" id="save-screenshot">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω</button>
            </div>
            
            <div class="drawing-status" id="drawing-status" style="margin-top: 10px; padding: 5px; background: #f8f9fa; border-radius: 4px; font-size: 12px; text-align: center;">
                –†–µ–∂–∏–º: –û–∂–∏–¥–∞–Ω–∏–µ
            </div>
        `;
    }

    setupEventListeners() {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
        this.toggleBtnContainer.addEventListener('click', (e) => {
            e.stopPropagation();
            this.togglePanel();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        this.panelContainer.addEventListener('click', (e) => {
            if (e.target.classList.contains('draw-tool-btn')) {
                this.selectTool(e.target.dataset.tool);
            }

            if (e.target.classList.contains('icon-btn')) {
                this.selectTool('icon');
                this.selectedIcon = e.target.dataset.icon;
            }

            if (e.target.id === 'clear-all') {
                this.clearAll();
            }

            if (e.target.id === 'eraser-btn') {
                this.toggleEraser();
            }

            if (e.target.id === 'exit-drawing-mode') {
                this.exitDrawingMode();
            }

            if (e.target.id === 'screenshot-btn') {
                this.takeScreenshot(false);
            }

            if (e.target.id === 'save-screenshot') {
                this.takeScreenshot(true);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        this.panelContainer.addEventListener('input', (e) => {
            if (e.target.id === 'draw-color') {
                this.currentColor = e.target.value;
            }
            if (e.target.id === 'draw-width') {
                this.currentWidth = parseInt(e.target.value);
                const widthValue = this.panelContainer.querySelector('#width-value');
                if (widthValue) {
                    widthValue.textContent = this.currentWidth;
                }
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–∞—Ä—Ç—ã
        this.map.on('mousedown', this.onMapMouseDown.bind(this));
        this.map.on('mousemove', this.onMapMouseMove.bind(this));
        this.map.on('mouseup', this.onMapMouseUp.bind(this));
        this.map.on('click', this.onMapClick.bind(this));
    }

    togglePanel() {
        this.panelContainer.classList.toggle('hidden');
    }

    selectTool(tool) {
        // –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
        this.exitDrawingMode();
        
        this.currentTool = tool;
        this.isDrawing = (tool !== 'icon');
        this.isEraserActive = false;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.panelContainer.querySelectorAll('.draw-tool-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–∫—Ä–æ–º–µ –∏–∫–æ–Ω–æ–∫)
        if (tool !== 'icon') {
            const toolBtn = this.panelContainer.querySelector(`[data-tool="${tool}"]`);
            if (toolBtn) {
                toolBtn.classList.add('active');
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä –∏ —Å—Ç–∞—Ç—É—Å
        if (this.isDrawing) {
            this.map.getContainer().style.cursor = 'crosshair';
            this.updateDrawingStatus(`–†–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è: ${this.getToolName(tool)}`);
        } else if (tool === 'icon') {
            this.map.getContainer().style.cursor = 'crosshair';
            this.updateDrawingStatus(`–†–µ–∂–∏–º: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ (${this.selectedIcon})`);
        } else {
            this.map.getContainer().style.cursor = '';
            this.updateDrawingStatus('–†–µ–∂–∏–º: –û–∂–∏–¥–∞–Ω–∏–µ');
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
    exitDrawingMode() {
        this.isDrawing = false;
        this.currentTool = null;
        this.isEraserActive = false;
        this.selectedIcon = null;
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
        this.map.dragging.enable();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä
        this.map.getContainer().style.cursor = '';
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        this.panelContainer.querySelectorAll('.draw-tool-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        
        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.currentElement = null;
        this.startPoint = null;
        this.tempLayer.clearLayers();
        
        this.updateDrawingStatus('–†–µ–∂–∏–º: –û–∂–∏–¥–∞–Ω–∏–µ');
        console.log('–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è');
    }
    
    getToolName(tool) {
        const toolNames = {
            'line': '–õ–∏–Ω–∏—è',
            'freehand': '–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è', 
            'arrow': '–°—Ç—Ä–µ–ª–∫–∞',
            'rectangle': '–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫',
            'ellipse': '–≠–ª–ª–∏–ø—Å',
            'icon': '–ò–∫–æ–Ω–∫–∞'
        };
        return toolNames[tool] || tool;
    }

    updateDrawingStatus(message) {
        const statusElement = this.panelContainer.querySelector('#drawing-status');
        if (statusElement) {
            statusElement.textContent = message;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é
            if (message.includes('–û–∂–∏–¥–∞–Ω–∏–µ')) {
                statusElement.style.background = '#f8f9fa';
                statusElement.style.color = '#6c757d';
            } else {
                statusElement.style.background = '#d4edda';
                statusElement.style.color = '#155724';
            }
        }
    }

    onMapMouseDown(e) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –±—ã–ª –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏
        if (e.originalEvent.button !== 0) return;
        
        if (!this.isDrawing || !this.currentTool || this.currentTool === 'icon') return;

        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è –∫–∞—Ä—Ç–æ–π
        e.originalEvent.preventDefault();
        e.originalEvent.stopPropagation();
        e.originalEvent.stopImmediatePropagation();

        this.startPoint = e.latlng;
        
        const style = {
            color: this.currentColor,
            weight: this.currentWidth
        };

        switch (this.currentTool) {
            case 'line':
            case 'arrow':
                this.currentElement = L.polyline([e.latlng, e.latlng], style).addTo(this.tempLayer);
                break;
                
            case 'rectangle':
                this.currentElement = L.rectangle([e.latlng, e.latlng], {
                    ...style,
                    fillOpacity: 0.2
                }).addTo(this.tempLayer);
                break;
                
            case 'ellipse':
                this.currentElement = L.circle(e.latlng, {
                    ...style,
                    fillOpacity: 0.2,
                    radius: 10
                }).addTo(this.tempLayer);
                break;
                
            case 'freehand':
                this.currentElement = L.polyline([e.latlng], style).addTo(this.tempLayer);
                break;
        }

        // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
        this.map.dragging.disable();
        
        console.log('–ù–∞—á–∞–ª–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—è:', this.currentTool);
    }


    onMapMouseMove(e) {
        if (!this.isDrawing || !this.currentElement || !this.startPoint) return;

        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è –∫–∞—Ä—Ç–æ–π
        e.originalEvent.preventDefault();
        e.originalEvent.stopPropagation();

        switch (this.currentTool) {
            case 'line':
            case 'arrow':
                this.currentElement.setLatLngs([this.startPoint, e.latlng]);
                break;
                
            case 'rectangle':
                this.currentElement.setBounds([this.startPoint, e.latlng]);
                break;
                
            case 'ellipse':
                const radius = this.startPoint.distanceTo(e.latlng);
                this.currentElement.setRadius(radius);
                break;
                
            case 'freehand':
                const latlngs = this.currentElement.getLatLngs();
                latlngs.push(e.latlng);
                this.currentElement.setLatLngs(latlngs);
                break;
        }
    }

    onMapMouseUp(e) {
        if (!this.isDrawing || !this.currentElement) return;

        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è –∫–∞—Ä—Ç–æ–π
        e.originalEvent.preventDefault();
        e.originalEvent.stopPropagation();

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
        this.map.dragging.enable();

        // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        let permanentElement = null;
        
        switch (this.currentTool) {
            case 'line':
            case 'arrow':
                permanentElement = L.polyline(this.currentElement.getLatLngs(), {
                    color: this.currentColor,
                    weight: this.currentWidth,
                    className: 'leaflet-drawn-element'
                });
                break;
                
            case 'rectangle':
                permanentElement = L.rectangle(this.currentElement.getBounds(), {
                    color: this.currentColor,
                    weight: this.currentWidth,
                    fillOpacity: 0.2,
                    className: 'leaflet-drawn-element'
                });
                break;
                
            case 'ellipse':
                permanentElement = L.circle(this.currentElement.getLatLng(), {
                    color: this.currentColor,
                    weight: this.currentWidth,
                    fillOpacity: 0.2,
                    radius: this.currentElement.getRadius(),
                    className: 'leaflet-drawn-element'
                });
                break;
                
            case 'freehand':
                permanentElement = L.polyline(this.currentElement.getLatLngs(), {
                    color: this.currentColor,
                    weight: this.currentWidth,
                    className: 'leaflet-drawn-element'
                });
                break;
        }

        if (permanentElement) {
            this.drawnItems.addLayer(permanentElement);
            
            // –î–ª—è —Å—Ç—Ä–µ–ª–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
            if (this.currentTool === 'arrow') {
                this.addArrowhead(permanentElement);
            }
            
            console.log('–≠–ª–µ–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', permanentElement);
        }

        this.currentElement = null;
        this.startPoint = null;
        this.tempLayer.clearLayers();
    }

    onMapClick(e) {
        // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏
        if (this.currentTool === 'icon' && this.selectedIcon) {
            this.placeIconAt(e.latlng);
        }

        // –†–µ–∂–∏–º –ª–∞—Å—Ç–∏–∫–∞
        if (this.isEraserActive) {
            this.removeElementAt(e.latlng);
        }
    }

    onMapClick(e) {
        // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏
        if (this.currentTool === 'icon' && this.selectedIcon) {
            this.placeIconAt(e.latlng);
        }

        // –†–µ–∂–∏–º –ª–∞—Å—Ç–∏–∫–∞
        if (this.isEraserActive) {
            this.removeElementAt(e.latlng);
        }
    }

    placeIconAt(latlng) {
        const icon = L.divIcon({
            html: this.getIconHTML(this.selectedIcon),
            className: 'drawn-element',
            iconSize: [30, 30],
            iconAnchor: [15, 15]
        });
        
        const marker = L.marker(latlng, { icon: icon }).addTo(this.drawnItems);
    }

    getIconHTML(iconType) {
        const icons = {
            flag: 'üö©',
            target: 'üéØ',
            warning: '‚ö†Ô∏è',
            star: '‚≠ê',
            heart: '‚ù§Ô∏è',
            skull: 'üíÄ'
        };
        
        return `<div style="font-size: 24px; text-align: center;">${icons[iconType]}</div>`;
    }

    addArrowhead(polyline) {
        const latlngs = polyline.getLatLngs();
        if (latlngs.length < 2) return;

        const endPoint = latlngs[latlngs.length - 1];
        
        const arrowIcon = L.divIcon({
            html: '‚û§',
            className: 'marker-arrow',
            iconSize: [20, 20],
            iconAnchor: [10, 10]
        });
        
        L.marker(endPoint, { icon: arrowIcon }).addTo(this.drawnItems);
    }
    
    setupEraserCursor() {
    const style = document.createElement('style');
    style.textContent = `
        .leaflet-eraser-cursor {
            cursor: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10" fill="none" stroke="red" stroke-width="2"/><line x1="8" y1="8" x2="16" y2="16" stroke="red" stroke-width="2"/><line x1="16" y1="8" x2="8" y2="16" stroke="red" stroke-width="2"/></svg>') 12 12, auto;
        }
    `;
    document.head.appendChild(style);
}


    toggleEraser() {
        this.isEraserActive = !this.isEraserActive;
        this.isDrawing = false;
        this.currentTool = null;
        
        if (this.isEraserActive) {
            this.map.getContainer().classList.add('leaflet-eraser-cursor');
            this.panelContainer.querySelectorAll('.draw-tool-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            console.log('–†–µ–∂–∏–º –ª–∞—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        } else {
            this.map.getContainer().classList.remove('leaflet-eraser-cursor');
            console.log('–†–µ–∂–∏–º –ª–∞—Å—Ç–∏–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        }
    }

    removeElementAt(latlng) {
        let closestLayer = null;
        let minDistance = 25; // 25 –º–µ—Ç—Ä–æ–≤

        this.drawnItems.eachLayer((layer) => {
            let distance = Infinity;
            
            if (layer instanceof L.Marker) {
                // –î–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤ - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–æ–∑–∏—Ü–∏–∏ –º–∞—Ä–∫–µ—Ä–∞
                distance = latlng.distanceTo(layer.getLatLng());
            } else if (layer instanceof L.Polyline) {
                // –î–ª—è –ª–∏–Ω–∏–π - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ª—é–±–æ–π —Ç–æ—á–∫–∏ –ª–∏–Ω–∏–∏
                const latlngs = layer.getLatLngs();
                latlngs.forEach(point => {
                    const dist = latlng.distanceTo(point);
                    if (dist < distance) {
                        distance = dist;
                    }
                });
            } else if (layer instanceof L.Polygon) {
                // –î–ª—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤ - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞
                const center = layer.getBounds().getCenter();
                distance = latlng.distanceTo(center);
            } else if (layer instanceof L.Circle) {
                // –î–ª—è –∫—Ä—É–≥–æ–≤ - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞
                const center = layer.getLatLng();
                distance = latlng.distanceTo(center);
            } else if (layer instanceof L.Rectangle) {
                // –î–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞
                const center = layer.getBounds().getCenter();
                distance = latlng.distanceTo(center);
            }

            if (distance < minDistance) {
                minDistance = distance;
                closestLayer = layer;
            }
        });

        if (closestLayer) {
            this.drawnItems.removeLayer(closestLayer);
            console.log('–≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω:', closestLayer);
        }
    }

    clearAll() {
        this.drawnItems.clearLayers();
    }

    takeScreenshot(save = false) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ html2canvas
        if (typeof html2canvas === 'undefined') {
            console.error('html2canvas –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
            alert('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ html2canvas');
            return;
        }

        const mapContainer = this.map.getContainer();
        
        html2canvas(mapContainer).then(canvas => {
            if (save) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                const link = document.createElement('a');
                link.download = `map-screenshot-${new Date().getTime()}.png`;
                link.href = canvas.toDataURL();
                link.click();
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
                const win = window.open('', '_blank');
                win.document.write('<img src="' + canvas.toDataURL() + '"/>');
            }
        }).catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: ' + error.message);
        });
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
function initDrawPanel() {
    if (window.map && window.map instanceof L.Map) {
        try {
            window.drawPanel = new DrawPanel(window.map);
            console.log('–ü–∞–Ω–µ–ª—å —Ä–∏—Å–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è:', error);
            return false;
        }
    } else {
        console.warn('–ö–∞—Ä—Ç–∞ Leaflet –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–∞–Ω–µ–ª—å —Ä–∏—Å–æ–≤–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        return false;
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã
    setTimeout(() => {
        if (!initDrawPanel()) {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
            setTimeout(initDrawPanel, 1000);
        }
    }, 500);
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
window.initDrawPanel = initDrawPanel;
